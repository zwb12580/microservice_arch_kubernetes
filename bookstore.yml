apiVersion: v1
kind: Namespace
metadata:
  name: bookstore-microservices
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: book-admin
  namespace: bookstore-microservices
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: book-admin-role
  namespace: bookstore-microservices
rules:
- apiGroups:
  - ""
  - "extensions"
  - "app"
  resources:
  - namespaces
  - endpoints
  - services
  - nodes
  - nodes/proxy
  - pods
  - configmaps
  verbs:
  - list
  - get
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: book-admin-role-binding
  namespace: bookstore-microservices
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: book-admin-role
subjects:
- kind: ServiceAccount
  name: book-admin
  namespace: bookstore-microservices
---
apiVersion: v1
data:
  application.yaml: |-
    database: hsqldb

    spring:
      datasource:
        schema: "classpath:db/${database}/schema.sql"
        data: "classpath:db/${database}/data.sql"
        sql-script-encoding: UTF-8
      jpa:
        show-sql: false
        hibernate:
          ddl-auto: none
        open-in-view: false
      resources:
        chain:
          compressed: true
          cache: true
        cache:
          period: 86400

    security:
      oauth2:
        client:
          clientId: account
          clientSecret: account_secret
          accessTokenUri: http://${AUTH_HOST:security}:${AUTH_PORT:80}/oauth/token
          grant-type: client_credentials
          scope: SERVICE
        resource:
          userInfoUri: BUGFIX

    logging:
      pattern:
        console: "%clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(-){faint} %clr([%t]){faint} %clr(%-40logger{39}){cyan}[%line]%clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}"
      level:
        root: INFO

    server:
      port: ${PORT:80}
kind: ConfigMap
metadata:
  name: account
  namespace: bookstore-microservices
---
apiVersion: v1
data:
  application.yaml: |-
    hystrix:
      command:
        default:
          execution:
            isolation:
              thread:
                timeoutInMilliseconds: 20000

    zuul:
      ignoredServices: '*'
      host:
        connect-timeout-millis: 20000
        socket-timeout-millis: 20000

      routes:
        account:
          path: /restful/accounts/**
          url: http://account
          stripPrefix: false
          sensitiveHeaders: "*"

        payment:
          path: /restful/pay/**
          url: http://payment
          stripPrefix: false
          sensitiveHeaders: "*"

        settlement:
          path: /restful/settlements/**
          url: http://payment
          stripPrefix: false
          sensitiveHeaders: "*"

        advertisements:
          path: /restful/advertisements/**
          url: http://warehouse
          stripPrefix: false
          sensitiveHeaders: "*"

        products:
          path: /restful/products/**
          url: http://warehouse
          stripPrefix: false
          sensitiveHeaders: "*"

        security:
          path: /oauth/**
          url: http://security
          stripPrefix: false
          sensitiveHeaders: "*"

    server:
      port: ${PORT:8080}

    logging:
      level:
        root: INFO
kind: ConfigMap
metadata:
  name: gateway
  namespace: bookstore-microservices
---
apiVersion: v1
data:
  application.yaml: |-
    database: hsqldb

    spring:
      datasource:
        schema: "classpath:db/${database}/schema.sql"
        data: "classpath:db/${database}/data.sql"
        sql-script-encoding: UTF-8
      jpa:
        show-sql: false
        hibernate:
          ddl-auto: none
        open-in-view: false
      resources:
        chain:
          compressed: true
          cache: true
        cache:
          period: 86400

    security:
      oauth2:
        client:
          clientId: payment
          clientSecret: payment_secret
          accessTokenUri: http://${AUTH_HOST:security}:${AUTH_PORT:80}/oauth/token
          grant-type: client_credentials
          scope: SERVICE
        resource:
          userInfoUri: BUGFIX

    logging:
      pattern:
        console: "%clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(-){faint} %clr([%t]){faint} %clr(%-40logger{39}){cyan}[%line]%clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}"
      level:
        root: INFO

    server:
      port: ${PORT:80}
kind: ConfigMap
metadata:
  name: payment
  namespace: bookstore-microservices
---
apiVersion: v1
data:
  application.yaml: |-
    database: hsqldb

    security:
      oauth2:
        client:
          clientId: security
          clientSecret: security_secret
          accessTokenUri: http://localhost:${PORT:80}/oauth/token
          grant-type: client_credentials
          scope: SERVICE

    logging:
      pattern:
        console: "%clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(-){faint} %clr([%t]){faint} %clr(%-40logger{39}){cyan}[%line]%clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}"
      level:
        root: INFO

    server:
      port: ${PORT:80}
kind: ConfigMap
metadata:
  name: security
  namespace: bookstore-microservices
---
apiVersion: v1
data:
  application.yaml: |-
    database: hsqldb

    spring:
      datasource:
        schema: "classpath:db/${database}/schema.sql"
        data: "classpath:db/${database}/data.sql"
        sql-script-encoding: UTF-8
      jpa:
        show-sql: false
        hibernate:
          ddl-auto: none
        open-in-view: false
      resources:
        chain:
          compressed: true
          cache: true
        cache:
          period: 86400

    security:
      oauth2:
        client:
          clientId: warehouse
          clientSecret: warehouse_secret
          accessTokenUri: http://${AUTH_HOST:security}:${AUTH_PORT:80}/oauth/token
          grant-type: client_credentials
          scope: SERVICE
        resource:
          userInfoUri: BUGFIX

    logging:
      pattern:
        console: "%clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(-){faint} %clr([%t]){faint} %clr(%-40logger{39}){cyan}[%line]%clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}"
      level:
        root: INFO

    server:
      port: ${PORT:80}
kind: ConfigMap
metadata:
  name: warehouse
  namespace: bookstore-microservices
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: account
  name: account
  namespace: bookstore-microservices
spec:
  ports:
  - port: 80
    targetPort: http-server
  selector:
    app: account
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gateway
  name: gateway
  namespace: bookstore-microservices
spec:
  ports:
  - nodePort: 30080
    port: 8080
    targetPort: http-server
  selector:
    app: gateway
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: payment
  name: payment
  namespace: bookstore-microservices
spec:
  ports:
  - port: 80
    targetPort: http-server
  selector:
    app: payment
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: security
  name: security
  namespace: bookstore-microservices
spec:
  ports:
  - port: 80
    targetPort: http-server
  selector:
    app: security
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: warehouse
  name: warehouse
  namespace: bookstore-microservices
spec:
  ports:
  - port: 80
    targetPort: http-server
  selector:
    app: warehouse
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: account
  name: bookstore-microservices-domain-account
  namespace: bookstore-microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: account
  template:
    metadata:
      labels:
        app: account
    spec:
      containers:
      - env:
        - name: PORT
          value: "80"
        - name: JAVA_TOOL_OPTIONS
          value: -agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=n,quiet=y
        image: zwb12580/bookstore-kubernetes-domain-account
        name: account
        ports:
        - containerPort: 80
          name: http-server
      serviceAccountName: book-admin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: payment
  name: bookstore-microservices-domain-payment
  namespace: bookstore-microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: payment
  template:
    metadata:
      labels:
        app: payment
    spec:
      containers:
      - env:
        - name: PORT
          value: "80"
        - name: JAVA_TOOL_OPTIONS
          value: -agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=n,quiet=y
        image: zwb12580/bookstore-kubernetes-domain-payment
        name: payment
        ports:
        - containerPort: 80
          name: http-server
      serviceAccountName: book-admin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: security
  name: bookstore-microservices-domain-security
  namespace: bookstore-microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: security
  template:
    metadata:
      labels:
        app: security
    spec:
      containers:
      - env:
        - name: PORT
          value: "80"
        - name: JAVA_TOOL_OPTIONS
          value: -agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=n,quiet=y
        image: zwb12580/bookstore-kubernetes-domain-security
        name: security
        ports:
        - containerPort: 80
          name: http-server
      serviceAccountName: book-admin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: warehouse
  name: bookstore-microservices-domain-warehouse
  namespace: bookstore-microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: warehouse
  template:
    metadata:
      labels:
        app: warehouse
    spec:
      containers:
      - env:
        - name: PORT
          value: "80"
        - name: JAVA_TOOL_OPTIONS
          value: -agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=n,quiet=y
        image: zwb12580/bookstore-kubernetes-domain-warehouse
        name: warehouse
        ports:
        - containerPort: 80
          name: http-server
      serviceAccountName: book-admin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gateway
  name: bookstore-microservices-platform-gateway
  namespace: bookstore-microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
      - env:
        - name: PORT
          value: "8080"
        - name: JAVA_TOOL_OPTIONS
          value: -agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=n,quiet=y
        image: zwb12580/bookstore-kubernetes-platform-gateway
        name: gateway
        ports:
        - containerPort: 8080
          name: http-server
      serviceAccountName: book-admin
